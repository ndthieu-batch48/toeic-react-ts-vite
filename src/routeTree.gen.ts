/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as ProtectedTestIndexRouteImport } from './routes/_protected/test/index'
import { Route as ProtectedProfileIndexRouteImport } from './routes/_protected/profile/index'
import { Route as ProtectedHistoryHistoryIdRouteImport } from './routes/_protected/history/$historyId'
import { Route as authPasswordVerifyRouteImport } from './routes/(auth)/password/verify'
import { Route as authPasswordResetRouteImport } from './routes/(auth)/password/reset'
import { Route as authPasswordForgotRouteImport } from './routes/(auth)/password/forgot'
import { Route as ProtectedTestTestIdIndexRouteImport } from './routes/_protected/test/$testId/index'
import { Route as ProtectedTestTestIdPracticeRouteImport } from './routes/_protected/test/$testId/practice'
import { Route as ProtectedTestTestIdLayoutRouteImport } from './routes/_protected/test/$testId/_layout'

const ProtectedTestTestIdRouteImport = createFileRoute(
  '/_protected/test/$testId',
)()

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedTestTestIdRoute = ProtectedTestTestIdRouteImport.update({
  id: '/test/$testId',
  path: '/test/$testId',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedTestIndexRoute = ProtectedTestIndexRouteImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedProfileIndexRoute = ProtectedProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedHistoryHistoryIdRoute =
  ProtectedHistoryHistoryIdRouteImport.update({
    id: '/history/$historyId',
    path: '/history/$historyId',
    getParentRoute: () => ProtectedRoute,
  } as any)
const authPasswordVerifyRoute = authPasswordVerifyRouteImport.update({
  id: '/(auth)/password/verify',
  path: '/password/verify',
  getParentRoute: () => rootRouteImport,
} as any)
const authPasswordResetRoute = authPasswordResetRouteImport.update({
  id: '/(auth)/password/reset',
  path: '/password/reset',
  getParentRoute: () => rootRouteImport,
} as any)
const authPasswordForgotRoute = authPasswordForgotRouteImport.update({
  id: '/(auth)/password/forgot',
  path: '/password/forgot',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedTestTestIdIndexRoute =
  ProtectedTestTestIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProtectedTestTestIdRoute,
  } as any)
const ProtectedTestTestIdPracticeRoute =
  ProtectedTestTestIdPracticeRouteImport.update({
    id: '/practice',
    path: '/practice',
    getParentRoute: () => ProtectedTestTestIdRoute,
  } as any)
const ProtectedTestTestIdLayoutRoute =
  ProtectedTestTestIdLayoutRouteImport.update({
    id: '/_layout',
    getParentRoute: () => ProtectedTestTestIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/password/forgot': typeof authPasswordForgotRoute
  '/password/reset': typeof authPasswordResetRoute
  '/password/verify': typeof authPasswordVerifyRoute
  '/history/$historyId': typeof ProtectedHistoryHistoryIdRoute
  '/profile': typeof ProtectedProfileIndexRoute
  '/test': typeof ProtectedTestIndexRoute
  '/test/$testId': typeof ProtectedTestTestIdLayoutRoute
  '/test/$testId/practice': typeof ProtectedTestTestIdPracticeRoute
  '/test/$testId/': typeof ProtectedTestTestIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/password/forgot': typeof authPasswordForgotRoute
  '/password/reset': typeof authPasswordResetRoute
  '/password/verify': typeof authPasswordVerifyRoute
  '/history/$historyId': typeof ProtectedHistoryHistoryIdRoute
  '/profile': typeof ProtectedProfileIndexRoute
  '/test': typeof ProtectedTestIndexRoute
  '/test/$testId': typeof ProtectedTestTestIdIndexRoute
  '/test/$testId/practice': typeof ProtectedTestTestIdPracticeRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/password/forgot': typeof authPasswordForgotRoute
  '/(auth)/password/reset': typeof authPasswordResetRoute
  '/(auth)/password/verify': typeof authPasswordVerifyRoute
  '/_protected/history/$historyId': typeof ProtectedHistoryHistoryIdRoute
  '/_protected/profile/': typeof ProtectedProfileIndexRoute
  '/_protected/test/': typeof ProtectedTestIndexRoute
  '/_protected/test/$testId': typeof ProtectedTestTestIdRouteWithChildren
  '/_protected/test/$testId/_layout': typeof ProtectedTestTestIdLayoutRoute
  '/_protected/test/$testId/practice': typeof ProtectedTestTestIdPracticeRoute
  '/_protected/test/$testId/': typeof ProtectedTestTestIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/password/forgot'
    | '/password/reset'
    | '/password/verify'
    | '/history/$historyId'
    | '/profile'
    | '/test'
    | '/test/$testId'
    | '/test/$testId/practice'
    | '/test/$testId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/password/forgot'
    | '/password/reset'
    | '/password/verify'
    | '/history/$historyId'
    | '/profile'
    | '/test'
    | '/test/$testId'
    | '/test/$testId/practice'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/(auth)/login'
    | '/(auth)/password/forgot'
    | '/(auth)/password/reset'
    | '/(auth)/password/verify'
    | '/_protected/history/$historyId'
    | '/_protected/profile/'
    | '/_protected/test/'
    | '/_protected/test/$testId'
    | '/_protected/test/$testId/_layout'
    | '/_protected/test/$testId/practice'
    | '/_protected/test/$testId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authPasswordForgotRoute: typeof authPasswordForgotRoute
  authPasswordResetRoute: typeof authPasswordResetRoute
  authPasswordVerifyRoute: typeof authPasswordVerifyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/test/$testId': {
      id: '/_protected/test/$testId'
      path: '/test/$testId'
      fullPath: '/test/$testId'
      preLoaderRoute: typeof ProtectedTestTestIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/test/': {
      id: '/_protected/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof ProtectedTestIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/profile/': {
      id: '/_protected/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProtectedProfileIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/history/$historyId': {
      id: '/_protected/history/$historyId'
      path: '/history/$historyId'
      fullPath: '/history/$historyId'
      preLoaderRoute: typeof ProtectedHistoryHistoryIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/(auth)/password/verify': {
      id: '/(auth)/password/verify'
      path: '/password/verify'
      fullPath: '/password/verify'
      preLoaderRoute: typeof authPasswordVerifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/password/reset': {
      id: '/(auth)/password/reset'
      path: '/password/reset'
      fullPath: '/password/reset'
      preLoaderRoute: typeof authPasswordResetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/password/forgot': {
      id: '/(auth)/password/forgot'
      path: '/password/forgot'
      fullPath: '/password/forgot'
      preLoaderRoute: typeof authPasswordForgotRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/test/$testId/': {
      id: '/_protected/test/$testId/'
      path: '/'
      fullPath: '/test/$testId/'
      preLoaderRoute: typeof ProtectedTestTestIdIndexRouteImport
      parentRoute: typeof ProtectedTestTestIdRoute
    }
    '/_protected/test/$testId/practice': {
      id: '/_protected/test/$testId/practice'
      path: '/practice'
      fullPath: '/test/$testId/practice'
      preLoaderRoute: typeof ProtectedTestTestIdPracticeRouteImport
      parentRoute: typeof ProtectedTestTestIdRoute
    }
    '/_protected/test/$testId/_layout': {
      id: '/_protected/test/$testId/_layout'
      path: '/test/$testId'
      fullPath: '/test/$testId'
      preLoaderRoute: typeof ProtectedTestTestIdLayoutRouteImport
      parentRoute: typeof ProtectedTestTestIdRoute
    }
  }
}

interface ProtectedTestTestIdRouteChildren {
  ProtectedTestTestIdLayoutRoute: typeof ProtectedTestTestIdLayoutRoute
  ProtectedTestTestIdPracticeRoute: typeof ProtectedTestTestIdPracticeRoute
  ProtectedTestTestIdIndexRoute: typeof ProtectedTestTestIdIndexRoute
}

const ProtectedTestTestIdRouteChildren: ProtectedTestTestIdRouteChildren = {
  ProtectedTestTestIdLayoutRoute: ProtectedTestTestIdLayoutRoute,
  ProtectedTestTestIdPracticeRoute: ProtectedTestTestIdPracticeRoute,
  ProtectedTestTestIdIndexRoute: ProtectedTestTestIdIndexRoute,
}

const ProtectedTestTestIdRouteWithChildren =
  ProtectedTestTestIdRoute._addFileChildren(ProtectedTestTestIdRouteChildren)

interface ProtectedRouteChildren {
  ProtectedHistoryHistoryIdRoute: typeof ProtectedHistoryHistoryIdRoute
  ProtectedProfileIndexRoute: typeof ProtectedProfileIndexRoute
  ProtectedTestIndexRoute: typeof ProtectedTestIndexRoute
  ProtectedTestTestIdRoute: typeof ProtectedTestTestIdRouteWithChildren
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedHistoryHistoryIdRoute: ProtectedHistoryHistoryIdRoute,
  ProtectedProfileIndexRoute: ProtectedProfileIndexRoute,
  ProtectedTestIndexRoute: ProtectedTestIndexRoute,
  ProtectedTestTestIdRoute: ProtectedTestTestIdRouteWithChildren,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authPasswordForgotRoute: authPasswordForgotRoute,
  authPasswordResetRoute: authPasswordResetRoute,
  authPasswordVerifyRoute: authPasswordVerifyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
