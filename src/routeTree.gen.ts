/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as protectedTestProtectedRouteImport } from './routes/(protected)/test/_protected'
import { Route as protectedProfileProtectedRouteImport } from './routes/(protected)/profile/_protected'
import { Route as protectedHistoryProtectedRouteImport } from './routes/(protected)/history/_protected'
import { Route as authPasswordVerifyRouteImport } from './routes/(auth)/password/verify'
import { Route as authPasswordResetRouteImport } from './routes/(auth)/password/reset'
import { Route as authPasswordForgotRouteImport } from './routes/(auth)/password/forgot'
import { Route as protectedTestProtectedIndexRouteImport } from './routes/(protected)/test/_protected.index'
import { Route as protectedProfileProtectedIndexRouteImport } from './routes/(protected)/profile/_protected.index'
import { Route as protectedHistoryProtectedIndexRouteImport } from './routes/(protected)/history/_protected.index'
import { Route as protectedTestProtectedTestIdRouteImport } from './routes/(protected)/test/_protected.$testId'
import { Route as protectedTestProtectedTestIdChar123PartIdChar125RouteImport } from './routes/(protected)/test/_protected.$testId.{-$partId}'

const protectedTestRouteImport = createFileRoute('/(protected)/test')()
const protectedProfileRouteImport = createFileRoute('/(protected)/profile')()
const protectedHistoryRouteImport = createFileRoute('/(protected)/history')()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedTestRoute = protectedTestRouteImport.update({
  id: '/(protected)/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedProfileRoute = protectedProfileRouteImport.update({
  id: '/(protected)/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedHistoryRoute = protectedHistoryRouteImport.update({
  id: '/(protected)/history',
  path: '/history',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedTestProtectedRoute = protectedTestProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => protectedTestRoute,
} as any)
const protectedProfileProtectedRoute =
  protectedProfileProtectedRouteImport.update({
    id: '/_protected',
    getParentRoute: () => protectedProfileRoute,
  } as any)
const protectedHistoryProtectedRoute =
  protectedHistoryProtectedRouteImport.update({
    id: '/_protected',
    getParentRoute: () => protectedHistoryRoute,
  } as any)
const authPasswordVerifyRoute = authPasswordVerifyRouteImport.update({
  id: '/(auth)/password/verify',
  path: '/password/verify',
  getParentRoute: () => rootRouteImport,
} as any)
const authPasswordResetRoute = authPasswordResetRouteImport.update({
  id: '/(auth)/password/reset',
  path: '/password/reset',
  getParentRoute: () => rootRouteImport,
} as any)
const authPasswordForgotRoute = authPasswordForgotRouteImport.update({
  id: '/(auth)/password/forgot',
  path: '/password/forgot',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedTestProtectedIndexRoute =
  protectedTestProtectedIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => protectedTestProtectedRoute,
  } as any)
const protectedProfileProtectedIndexRoute =
  protectedProfileProtectedIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => protectedProfileProtectedRoute,
  } as any)
const protectedHistoryProtectedIndexRoute =
  protectedHistoryProtectedIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => protectedHistoryProtectedRoute,
  } as any)
const protectedTestProtectedTestIdRoute =
  protectedTestProtectedTestIdRouteImport.update({
    id: '/$testId',
    path: '/$testId',
    getParentRoute: () => protectedTestProtectedRoute,
  } as any)
const protectedTestProtectedTestIdChar123PartIdChar125Route =
  protectedTestProtectedTestIdChar123PartIdChar125RouteImport.update({
    id: '/{-$partId}',
    path: '/{-$partId}',
    getParentRoute: () => protectedTestProtectedTestIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/password/forgot': typeof authPasswordForgotRoute
  '/password/reset': typeof authPasswordResetRoute
  '/password/verify': typeof authPasswordVerifyRoute
  '/history': typeof protectedHistoryProtectedRouteWithChildren
  '/profile': typeof protectedProfileProtectedRouteWithChildren
  '/test': typeof protectedTestProtectedRouteWithChildren
  '/test/$testId': typeof protectedTestProtectedTestIdRouteWithChildren
  '/history/': typeof protectedHistoryProtectedIndexRoute
  '/profile/': typeof protectedProfileProtectedIndexRoute
  '/test/': typeof protectedTestProtectedIndexRoute
  '/test/$testId/{-$partId}': typeof protectedTestProtectedTestIdChar123PartIdChar125Route
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/password/forgot': typeof authPasswordForgotRoute
  '/password/reset': typeof authPasswordResetRoute
  '/password/verify': typeof authPasswordVerifyRoute
  '/history': typeof protectedHistoryProtectedIndexRoute
  '/profile': typeof protectedProfileProtectedIndexRoute
  '/test': typeof protectedTestProtectedIndexRoute
  '/test/$testId': typeof protectedTestProtectedTestIdRouteWithChildren
  '/test/$testId/{-$partId}': typeof protectedTestProtectedTestIdChar123PartIdChar125Route
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/password/forgot': typeof authPasswordForgotRoute
  '/(auth)/password/reset': typeof authPasswordResetRoute
  '/(auth)/password/verify': typeof authPasswordVerifyRoute
  '/(protected)/history': typeof protectedHistoryRouteWithChildren
  '/(protected)/history/_protected': typeof protectedHistoryProtectedRouteWithChildren
  '/(protected)/profile': typeof protectedProfileRouteWithChildren
  '/(protected)/profile/_protected': typeof protectedProfileProtectedRouteWithChildren
  '/(protected)/test': typeof protectedTestRouteWithChildren
  '/(protected)/test/_protected': typeof protectedTestProtectedRouteWithChildren
  '/(protected)/test/_protected/$testId': typeof protectedTestProtectedTestIdRouteWithChildren
  '/(protected)/history/_protected/': typeof protectedHistoryProtectedIndexRoute
  '/(protected)/profile/_protected/': typeof protectedProfileProtectedIndexRoute
  '/(protected)/test/_protected/': typeof protectedTestProtectedIndexRoute
  '/(protected)/test/_protected/$testId/{-$partId}': typeof protectedTestProtectedTestIdChar123PartIdChar125Route
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/password/forgot'
    | '/password/reset'
    | '/password/verify'
    | '/history'
    | '/profile'
    | '/test'
    | '/test/$testId'
    | '/history/'
    | '/profile/'
    | '/test/'
    | '/test/$testId/{-$partId}'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/password/forgot'
    | '/password/reset'
    | '/password/verify'
    | '/history'
    | '/profile'
    | '/test'
    | '/test/$testId'
    | '/test/$testId/{-$partId}'
  id:
    | '__root__'
    | '/'
    | '/(auth)/login'
    | '/(auth)/password/forgot'
    | '/(auth)/password/reset'
    | '/(auth)/password/verify'
    | '/(protected)/history'
    | '/(protected)/history/_protected'
    | '/(protected)/profile'
    | '/(protected)/profile/_protected'
    | '/(protected)/test'
    | '/(protected)/test/_protected'
    | '/(protected)/test/_protected/$testId'
    | '/(protected)/history/_protected/'
    | '/(protected)/profile/_protected/'
    | '/(protected)/test/_protected/'
    | '/(protected)/test/_protected/$testId/{-$partId}'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authLoginRoute: typeof authLoginRoute
  authPasswordForgotRoute: typeof authPasswordForgotRoute
  authPasswordResetRoute: typeof authPasswordResetRoute
  authPasswordVerifyRoute: typeof authPasswordVerifyRoute
  protectedHistoryRoute: typeof protectedHistoryRouteWithChildren
  protectedProfileRoute: typeof protectedProfileRouteWithChildren
  protectedTestRoute: typeof protectedTestRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/test': {
      id: '/(protected)/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof protectedTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/profile': {
      id: '/(protected)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof protectedProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/history': {
      id: '/(protected)/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof protectedHistoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/test/_protected': {
      id: '/(protected)/test/_protected'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof protectedTestProtectedRouteImport
      parentRoute: typeof protectedTestRoute
    }
    '/(protected)/profile/_protected': {
      id: '/(protected)/profile/_protected'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof protectedProfileProtectedRouteImport
      parentRoute: typeof protectedProfileRoute
    }
    '/(protected)/history/_protected': {
      id: '/(protected)/history/_protected'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof protectedHistoryProtectedRouteImport
      parentRoute: typeof protectedHistoryRoute
    }
    '/(auth)/password/verify': {
      id: '/(auth)/password/verify'
      path: '/password/verify'
      fullPath: '/password/verify'
      preLoaderRoute: typeof authPasswordVerifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/password/reset': {
      id: '/(auth)/password/reset'
      path: '/password/reset'
      fullPath: '/password/reset'
      preLoaderRoute: typeof authPasswordResetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/password/forgot': {
      id: '/(auth)/password/forgot'
      path: '/password/forgot'
      fullPath: '/password/forgot'
      preLoaderRoute: typeof authPasswordForgotRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/test/_protected/': {
      id: '/(protected)/test/_protected/'
      path: '/'
      fullPath: '/test/'
      preLoaderRoute: typeof protectedTestProtectedIndexRouteImport
      parentRoute: typeof protectedTestProtectedRoute
    }
    '/(protected)/profile/_protected/': {
      id: '/(protected)/profile/_protected/'
      path: '/'
      fullPath: '/profile/'
      preLoaderRoute: typeof protectedProfileProtectedIndexRouteImport
      parentRoute: typeof protectedProfileProtectedRoute
    }
    '/(protected)/history/_protected/': {
      id: '/(protected)/history/_protected/'
      path: '/'
      fullPath: '/history/'
      preLoaderRoute: typeof protectedHistoryProtectedIndexRouteImport
      parentRoute: typeof protectedHistoryProtectedRoute
    }
    '/(protected)/test/_protected/$testId': {
      id: '/(protected)/test/_protected/$testId'
      path: '/$testId'
      fullPath: '/test/$testId'
      preLoaderRoute: typeof protectedTestProtectedTestIdRouteImport
      parentRoute: typeof protectedTestProtectedRoute
    }
    '/(protected)/test/_protected/$testId/{-$partId}': {
      id: '/(protected)/test/_protected/$testId/{-$partId}'
      path: '/{-$partId}'
      fullPath: '/test/$testId/{-$partId}'
      preLoaderRoute: typeof protectedTestProtectedTestIdChar123PartIdChar125RouteImport
      parentRoute: typeof protectedTestProtectedTestIdRoute
    }
  }
}

interface protectedHistoryProtectedRouteChildren {
  protectedHistoryProtectedIndexRoute: typeof protectedHistoryProtectedIndexRoute
}

const protectedHistoryProtectedRouteChildren: protectedHistoryProtectedRouteChildren =
  {
    protectedHistoryProtectedIndexRoute: protectedHistoryProtectedIndexRoute,
  }

const protectedHistoryProtectedRouteWithChildren =
  protectedHistoryProtectedRoute._addFileChildren(
    protectedHistoryProtectedRouteChildren,
  )

interface protectedHistoryRouteChildren {
  protectedHistoryProtectedRoute: typeof protectedHistoryProtectedRouteWithChildren
}

const protectedHistoryRouteChildren: protectedHistoryRouteChildren = {
  protectedHistoryProtectedRoute: protectedHistoryProtectedRouteWithChildren,
}

const protectedHistoryRouteWithChildren =
  protectedHistoryRoute._addFileChildren(protectedHistoryRouteChildren)

interface protectedProfileProtectedRouteChildren {
  protectedProfileProtectedIndexRoute: typeof protectedProfileProtectedIndexRoute
}

const protectedProfileProtectedRouteChildren: protectedProfileProtectedRouteChildren =
  {
    protectedProfileProtectedIndexRoute: protectedProfileProtectedIndexRoute,
  }

const protectedProfileProtectedRouteWithChildren =
  protectedProfileProtectedRoute._addFileChildren(
    protectedProfileProtectedRouteChildren,
  )

interface protectedProfileRouteChildren {
  protectedProfileProtectedRoute: typeof protectedProfileProtectedRouteWithChildren
}

const protectedProfileRouteChildren: protectedProfileRouteChildren = {
  protectedProfileProtectedRoute: protectedProfileProtectedRouteWithChildren,
}

const protectedProfileRouteWithChildren =
  protectedProfileRoute._addFileChildren(protectedProfileRouteChildren)

interface protectedTestProtectedTestIdRouteChildren {
  protectedTestProtectedTestIdChar123PartIdChar125Route: typeof protectedTestProtectedTestIdChar123PartIdChar125Route
}

const protectedTestProtectedTestIdRouteChildren: protectedTestProtectedTestIdRouteChildren =
  {
    protectedTestProtectedTestIdChar123PartIdChar125Route:
      protectedTestProtectedTestIdChar123PartIdChar125Route,
  }

const protectedTestProtectedTestIdRouteWithChildren =
  protectedTestProtectedTestIdRoute._addFileChildren(
    protectedTestProtectedTestIdRouteChildren,
  )

interface protectedTestProtectedRouteChildren {
  protectedTestProtectedTestIdRoute: typeof protectedTestProtectedTestIdRouteWithChildren
  protectedTestProtectedIndexRoute: typeof protectedTestProtectedIndexRoute
}

const protectedTestProtectedRouteChildren: protectedTestProtectedRouteChildren =
  {
    protectedTestProtectedTestIdRoute:
      protectedTestProtectedTestIdRouteWithChildren,
    protectedTestProtectedIndexRoute: protectedTestProtectedIndexRoute,
  }

const protectedTestProtectedRouteWithChildren =
  protectedTestProtectedRoute._addFileChildren(
    protectedTestProtectedRouteChildren,
  )

interface protectedTestRouteChildren {
  protectedTestProtectedRoute: typeof protectedTestProtectedRouteWithChildren
}

const protectedTestRouteChildren: protectedTestRouteChildren = {
  protectedTestProtectedRoute: protectedTestProtectedRouteWithChildren,
}

const protectedTestRouteWithChildren = protectedTestRoute._addFileChildren(
  protectedTestRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authLoginRoute: authLoginRoute,
  authPasswordForgotRoute: authPasswordForgotRoute,
  authPasswordResetRoute: authPasswordResetRoute,
  authPasswordVerifyRoute: authPasswordVerifyRoute,
  protectedHistoryRoute: protectedHistoryRouteWithChildren,
  protectedProfileRoute: protectedProfileRouteWithChildren,
  protectedTestRoute: protectedTestRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
