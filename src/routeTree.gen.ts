/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedLayoutRouteImport } from './routes/_protected/_layout'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as ProtectedTestsIndexRouteImport } from './routes/_protected/tests/index'
import { Route as ProtectedProfileIndexRouteImport } from './routes/_protected/profile/index'
import { Route as ProtectedHistoryIndexRouteImport } from './routes/_protected/history/index'
import { Route as ProtectedTestsDetailRouteImport } from './routes/_protected/tests/detail'
import { Route as ProtectedTestsTestIdRouteImport } from './routes/_protected/tests/$testId'
import { Route as authPasswordVerifyRouteImport } from './routes/(auth)/password/verify'
import { Route as authPasswordResetRouteImport } from './routes/(auth)/password/reset'
import { Route as authPasswordForgotRouteImport } from './routes/(auth)/password/forgot'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedLayoutRoute = ProtectedLayoutRouteImport.update({
  id: '/_protected/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedTestsIndexRoute = ProtectedTestsIndexRouteImport.update({
  id: '/_protected/tests/',
  path: '/tests/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedProfileIndexRoute = ProtectedProfileIndexRouteImport.update({
  id: '/_protected/profile/',
  path: '/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedHistoryIndexRoute = ProtectedHistoryIndexRouteImport.update({
  id: '/_protected/history/',
  path: '/history/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedTestsDetailRoute = ProtectedTestsDetailRouteImport.update({
  id: '/_protected/tests/detail',
  path: '/tests/detail',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedTestsTestIdRoute = ProtectedTestsTestIdRouteImport.update({
  id: '/_protected/tests/$testId',
  path: '/tests/$testId',
  getParentRoute: () => rootRouteImport,
} as any)
const authPasswordVerifyRoute = authPasswordVerifyRouteImport.update({
  id: '/(auth)/password/verify',
  path: '/password/verify',
  getParentRoute: () => rootRouteImport,
} as any)
const authPasswordResetRoute = authPasswordResetRouteImport.update({
  id: '/(auth)/password/reset',
  path: '/password/reset',
  getParentRoute: () => rootRouteImport,
} as any)
const authPasswordForgotRoute = authPasswordForgotRouteImport.update({
  id: '/(auth)/password/forgot',
  path: '/password/forgot',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/password/forgot': typeof authPasswordForgotRoute
  '/password/reset': typeof authPasswordResetRoute
  '/password/verify': typeof authPasswordVerifyRoute
  '/tests/$testId': typeof ProtectedTestsTestIdRoute
  '/tests/detail': typeof ProtectedTestsDetailRoute
  '/history': typeof ProtectedHistoryIndexRoute
  '/profile': typeof ProtectedProfileIndexRoute
  '/tests': typeof ProtectedTestsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/password/forgot': typeof authPasswordForgotRoute
  '/password/reset': typeof authPasswordResetRoute
  '/password/verify': typeof authPasswordVerifyRoute
  '/tests/$testId': typeof ProtectedTestsTestIdRoute
  '/tests/detail': typeof ProtectedTestsDetailRoute
  '/history': typeof ProtectedHistoryIndexRoute
  '/profile': typeof ProtectedProfileIndexRoute
  '/tests': typeof ProtectedTestsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)/login': typeof authLoginRoute
  '/_protected/_layout': typeof ProtectedLayoutRoute
  '/(auth)/password/forgot': typeof authPasswordForgotRoute
  '/(auth)/password/reset': typeof authPasswordResetRoute
  '/(auth)/password/verify': typeof authPasswordVerifyRoute
  '/_protected/tests/$testId': typeof ProtectedTestsTestIdRoute
  '/_protected/tests/detail': typeof ProtectedTestsDetailRoute
  '/_protected/history/': typeof ProtectedHistoryIndexRoute
  '/_protected/profile/': typeof ProtectedProfileIndexRoute
  '/_protected/tests/': typeof ProtectedTestsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/password/forgot'
    | '/password/reset'
    | '/password/verify'
    | '/tests/$testId'
    | '/tests/detail'
    | '/history'
    | '/profile'
    | '/tests'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/password/forgot'
    | '/password/reset'
    | '/password/verify'
    | '/tests/$testId'
    | '/tests/detail'
    | '/history'
    | '/profile'
    | '/tests'
  id:
    | '__root__'
    | '/'
    | '/(auth)/login'
    | '/_protected/_layout'
    | '/(auth)/password/forgot'
    | '/(auth)/password/reset'
    | '/(auth)/password/verify'
    | '/_protected/tests/$testId'
    | '/_protected/tests/detail'
    | '/_protected/history/'
    | '/_protected/profile/'
    | '/_protected/tests/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authLoginRoute: typeof authLoginRoute
  ProtectedLayoutRoute: typeof ProtectedLayoutRoute
  authPasswordForgotRoute: typeof authPasswordForgotRoute
  authPasswordResetRoute: typeof authPasswordResetRoute
  authPasswordVerifyRoute: typeof authPasswordVerifyRoute
  ProtectedTestsTestIdRoute: typeof ProtectedTestsTestIdRoute
  ProtectedTestsDetailRoute: typeof ProtectedTestsDetailRoute
  ProtectedHistoryIndexRoute: typeof ProtectedHistoryIndexRoute
  ProtectedProfileIndexRoute: typeof ProtectedProfileIndexRoute
  ProtectedTestsIndexRoute: typeof ProtectedTestsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/_layout': {
      id: '/_protected/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/tests/': {
      id: '/_protected/tests/'
      path: '/tests'
      fullPath: '/tests'
      preLoaderRoute: typeof ProtectedTestsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/profile/': {
      id: '/_protected/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProtectedProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/history/': {
      id: '/_protected/history/'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof ProtectedHistoryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/tests/detail': {
      id: '/_protected/tests/detail'
      path: '/tests/detail'
      fullPath: '/tests/detail'
      preLoaderRoute: typeof ProtectedTestsDetailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/tests/$testId': {
      id: '/_protected/tests/$testId'
      path: '/tests/$testId'
      fullPath: '/tests/$testId'
      preLoaderRoute: typeof ProtectedTestsTestIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/password/verify': {
      id: '/(auth)/password/verify'
      path: '/password/verify'
      fullPath: '/password/verify'
      preLoaderRoute: typeof authPasswordVerifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/password/reset': {
      id: '/(auth)/password/reset'
      path: '/password/reset'
      fullPath: '/password/reset'
      preLoaderRoute: typeof authPasswordResetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/password/forgot': {
      id: '/(auth)/password/forgot'
      path: '/password/forgot'
      fullPath: '/password/forgot'
      preLoaderRoute: typeof authPasswordForgotRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authLoginRoute: authLoginRoute,
  ProtectedLayoutRoute: ProtectedLayoutRoute,
  authPasswordForgotRoute: authPasswordForgotRoute,
  authPasswordResetRoute: authPasswordResetRoute,
  authPasswordVerifyRoute: authPasswordVerifyRoute,
  ProtectedTestsTestIdRoute: ProtectedTestsTestIdRoute,
  ProtectedTestsDetailRoute: ProtectedTestsDetailRoute,
  ProtectedHistoryIndexRoute: ProtectedHistoryIndexRoute,
  ProtectedProfileIndexRoute: ProtectedProfileIndexRoute,
  ProtectedTestsIndexRoute: ProtectedTestsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
